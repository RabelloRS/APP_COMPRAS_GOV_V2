# Script PowerShell para verificar a sa√∫de da aplica√ß√£o Compras.gov
# Autor: Rodrigo
# Data: $(Get-Date -Format "yyyy-MM-dd")

Write-Host "üè• Verifica√ß√£o de Sa√∫de - Aplica√ß√£o Compras.gov" -ForegroundColor Blue
Write-Host "===============================================" -ForegroundColor Blue

# Fun√ß√£o para fazer requisi√ß√£o HTTP
function Test-HttpRequest {
    param(
        [string]$Url,
        [int]$TimeoutSeconds = 10
    )
    
    try {
        $response = Invoke-WebRequest -Uri $Url -TimeoutSec $TimeoutSeconds -UseBasicParsing
        return @{
            Success = $true
            StatusCode = $response.StatusCode
            ResponseTime = $response.BaseResponse.ResponseTime
        }
    }
    catch {
        return @{
            Success = $false
            Error = $_.Exception.Message
        }
    }
}

# Fun√ß√£o para verificar se um processo est√° rodando
function Test-ProcessRunning {
    param([string]$ProcessName)
    
    $processes = Get-Process -Name $ProcessName -ErrorAction SilentlyContinue
    return $processes.Count -gt 0
}

# Fun√ß√£o para verificar se uma porta est√° em uso
function Test-PortInUse {
    param([int]$Port)
    
    $connections = Get-NetTCPConnection -LocalPort $Port -ErrorAction SilentlyContinue
    return $connections.Count -gt 0
}

# Verificar ambiente Node.js
Write-Host "`nüîç Verificando ambiente Node.js..." -ForegroundColor Cyan

$nodeVersion = node --version 2>$null
$npmVersion = npm --version 2>$null

if ($nodeVersion) {
    Write-Host "‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
} else {
    Write-Host "‚ùå Node.js n√£o encontrado" -ForegroundColor Red
}

if ($npmVersion) {
    Write-Host "‚úÖ npm: $npmVersion" -ForegroundColor Green
} else {
    Write-Host "‚ùå npm n√£o encontrado" -ForegroundColor Red
}

# Verificar depend√™ncias
Write-Host "`nüîç Verificando depend√™ncias..." -ForegroundColor Cyan

$nodeModulesPath = "node_modules"
if (Test-Path $nodeModulesPath) {
    Write-Host "‚úÖ node_modules encontrado" -ForegroundColor Green
    
    # Verificar depend√™ncias principais
    $dependencies = @("react", "typescript", "axios", "lucide-react", "tailwindcss")
    foreach ($dep in $dependencies) {
        $depPath = Join-Path $nodeModulesPath $dep
        if (Test-Path $depPath) {
            Write-Host "‚úÖ $dep instalado" -ForegroundColor Green
        } else {
            Write-Host "‚ùå $dep n√£o encontrado" -ForegroundColor Red
        }
    }
} else {
    Write-Host "‚ùå node_modules n√£o encontrado" -ForegroundColor Red
}

# Verificar arquivos de configura√ß√£o
Write-Host "`nüîç Verificando arquivos de configura√ß√£o..." -ForegroundColor Cyan

$configFiles = @{
    "package.json" = "Configura√ß√£o do projeto"
    "tsconfig.json" = "Configura√ß√£o TypeScript"
    "tailwind.config.js" = "Configura√ß√£o Tailwind CSS"
    "postcss.config.js" = "Configura√ß√£o PostCSS"
}

foreach ($file in $configFiles.Keys) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $($configFiles[$file]): $file" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $($configFiles[$file]): $file n√£o encontrado" -ForegroundColor Red
    }
}

# Verificar arquivos da aplica√ß√£o
Write-Host "`nüîç Verificando arquivos da aplica√ß√£o..." -ForegroundColor Cyan

$appFiles = @{
    "src/App.tsx" = "Componente principal"
    "src/index.tsx" = "Ponto de entrada"
    "src/index.css" = "Estilos globais"
    "src/types/index.ts" = "Defini√ß√µes de tipos"
    "src/services/api.ts" = "Servi√ßos da API"
    "public/index.html" = "HTML principal"
}

foreach ($file in $appFiles.Keys) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $($appFiles[$file]): $file" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $($appFiles[$file]): $file n√£o encontrado" -ForegroundColor Red
    }
}

# Verificar se o servidor est√° rodando
Write-Host "`nüîç Verificando servidor de desenvolvimento..." -ForegroundColor Cyan

$ports = @(3000, 3001)
$serverRunning = $false

foreach ($port in $ports) {
    if (Test-PortInUse $port) {
        Write-Host "‚úÖ Servidor rodando na porta $port" -ForegroundColor Green
        $serverRunning = $true
        
        # Testar se a aplica√ß√£o responde
        $appUrl = "http://localhost:$port"
        Write-Host "   Testando resposta da aplica√ß√£o..." -ForegroundColor Cyan
        
        $response = Test-HttpRequest -Url $appUrl -TimeoutSeconds 5
        if ($response.Success) {
            Write-Host "   ‚úÖ Aplica√ß√£o respondendo (Status: $($response.StatusCode))" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå Aplica√ß√£o n√£o responde: $($response.Error)" -ForegroundColor Red
        }
        break
    }
}

if (-not $serverRunning) {
    Write-Host "‚ùå Servidor n√£o est√° rodando" -ForegroundColor Red
    Write-Host "   Execute: npm start" -ForegroundColor Yellow
}

# Verificar conectividade com a API do Compras.gov
Write-Host "`nüîç Verificando conectividade com a API do Compras.gov..." -ForegroundColor Cyan

$apiUrls = @{
    "https://dadosabertos.compras.gov.br/modulo-material/1_consultarGrupoMaterial?pagina=1" = "API Grupos de Materiais"
    "https://dadosabertos.compras.gov.br/modulo-material/2_consultarClasseMaterial?pagina=1" = "API Classes de Materiais"
    "https://dadosabertos.compras.gov.br/modulo-servico/6_consultarItemServico?pagina=1" = "API Servi√ßos"
}

foreach ($url in $apiUrls.Keys) {
    Write-Host "   Testando $($apiUrls[$url])..." -ForegroundColor Cyan
    $response = Test-HttpRequest -Url $url -TimeoutSeconds 10
    
    if ($response.Success) {
        Write-Host "   ‚úÖ $($apiUrls[$url]) - OK (Status: $($response.StatusCode))" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $($apiUrls[$url]) - Erro: $($response.Error)" -ForegroundColor Red
    }
}

# Verificar conectividade geral com a internet
Write-Host "`nüîç Verificando conectividade com a internet..." -ForegroundColor Cyan

$testUrls = @("https://www.google.com", "https://www.github.com")

foreach ($url in $testUrls) {
    $response = Test-HttpRequest -Url $url -TimeoutSeconds 5
    if ($response.Success) {
        Write-Host "‚úÖ Conectividade com $url - OK" -ForegroundColor Green
        break
    }
}

if (-not $response.Success) {
    Write-Host "‚ùå Problemas de conectividade com a internet" -ForegroundColor Red
}

# Verificar espa√ßo em disco
Write-Host "`nüîç Verificando espa√ßo em disco..." -ForegroundColor Cyan

$drive = Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'"
$freeSpaceGB = [math]::Round($drive.FreeSpace / 1GB, 2)
$totalSpaceGB = [math]::Round($drive.Size / 1GB, 2)
$usedSpaceGB = $totalSpaceGB - $freeSpaceGB
$usedPercentage = [math]::Round(($usedSpaceGB / $totalSpaceGB) * 100, 1)

Write-Host "üíæ Espa√ßo em disco C:" -ForegroundColor White
Write-Host "   Total: ${totalSpaceGB}GB" -ForegroundColor White
Write-Host "   Usado: ${usedSpaceGB}GB (${usedPercentage}%)" -ForegroundColor White
Write-Host "   Livre: ${freeSpaceGB}GB" -ForegroundColor White

if ($freeSpaceGB -lt 1) {
    Write-Host "   ‚ö†Ô∏è  Pouco espa√ßo livre (< 1GB)" -ForegroundColor Yellow
} else {
    Write-Host "   ‚úÖ Espa√ßo suficiente dispon√≠vel" -ForegroundColor Green
}

# Verificar mem√≥ria RAM
Write-Host "`nüîç Verificando mem√≥ria RAM..." -ForegroundColor Cyan

$memory = Get-WmiObject -Class Win32_OperatingSystem
$totalMemoryGB = [math]::Round($memory.TotalVisibleMemorySize / 1MB, 2)
$freeMemoryGB = [math]::Round($memory.FreePhysicalMemory / 1MB, 2)
$usedMemoryGB = $totalMemoryGB - $freeMemoryGB
$memoryUsagePercentage = [math]::Round(($usedMemoryGB / $totalMemoryGB) * 100, 1)

Write-Host "üß† Mem√≥ria RAM:" -ForegroundColor White
Write-Host "   Total: ${totalMemoryGB}GB" -ForegroundColor White
Write-Host "   Usado: ${usedMemoryGB}GB (${memoryUsagePercentage}%)" -ForegroundColor White
Write-Host "   Livre: ${freeMemoryGB}GB" -ForegroundColor White

if ($memoryUsagePercentage -gt 90) {
    Write-Host "   ‚ö†Ô∏è  Uso de mem√≥ria alto (> 90%)" -ForegroundColor Yellow
} else {
    Write-Host "   ‚úÖ Uso de mem√≥ria normal" -ForegroundColor Green
}

# Resumo final
Write-Host "`nüìä Resumo da Verifica√ß√£o:" -ForegroundColor Blue
Write-Host "=========================" -ForegroundColor Blue

$issues = @()

if (-not $nodeVersion) { $issues += "Node.js n√£o instalado" }
if (-not $npmVersion) { $issues += "npm n√£o encontrado" }
if (-not (Test-Path $nodeModulesPath)) { $issues += "Depend√™ncias n√£o instaladas" }
if (-not $serverRunning) { $issues += "Servidor n√£o est√° rodando" }
if ($freeSpaceGB -lt 1) { $issues += "Pouco espa√ßo em disco" }
if ($memoryUsagePercentage -gt 90) { $issues += "Uso de mem√≥ria alto" }

if ($issues.Count -eq 0) {
    Write-Host "‚úÖ Tudo parece estar funcionando corretamente!" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Encontrados $($issues.Count) problema(s):" -ForegroundColor Yellow
    foreach ($issue in $issues) {
        Write-Host "   ‚Ä¢ $issue" -ForegroundColor Yellow
    }
}

Write-Host "`nüèÅ Verifica√ß√£o conclu√≠da em $(Get-Date -Format 'HH:mm:ss')" -ForegroundColor Blue 