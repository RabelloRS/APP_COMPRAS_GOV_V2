# Script PowerShell para iniciar a aplica√ß√£o Compras.gov
# Autor: Rodrigo
# Data: $(Get-Date -Format "yyyy-MM-dd")

Write-Host "üöÄ Iniciando Aplica√ß√£o Compras.gov" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green

# Fun√ß√£o para verificar se um comando existe
function Test-Command {
    param($Command)
    $null = Get-Command $Command -ErrorAction SilentlyContinue
    return $?
}

# Fun√ß√£o para verificar vers√£o do Node.js
function Get-NodeVersion {
    try {
        $nodeVersion = node --version 2>$null
        if ($nodeVersion) {
            return $nodeVersion.Trim()
        }
        return $null
    }
    catch {
        return $null
    }
}

# Fun√ß√£o para verificar vers√£o do npm
function Get-NpmVersion {
    try {
        $npmVersion = npm --version 2>$null
        if ($npmVersion) {
            return $npmVersion.Trim()
        }
        return $null
    }
    catch {
        return $null
    }
}

# Verificar se estamos no diret√≥rio correto
$currentDir = Get-Location
$packageJsonPath = Join-Path $currentDir "package.json"

if (-not (Test-Path $packageJsonPath)) {
    Write-Host "‚ùå Erro: package.json n√£o encontrado no diret√≥rio atual" -ForegroundColor Red
    Write-Host "   Certifique-se de estar no diret√≥rio raiz do projeto" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Diret√≥rio do projeto verificado" -ForegroundColor Green

# Verificar Node.js
Write-Host "`nüîç Verificando Node.js..." -ForegroundColor Cyan
if (Test-Command "node") {
    $nodeVersion = Get-NodeVersion
    if ($nodeVersion) {
        Write-Host "‚úÖ Node.js encontrado: $nodeVersion" -ForegroundColor Green
        
        # Verificar vers√£o m√≠nima (16+)
        $versionNumber = $nodeVersion -replace 'v', ''
        $majorVersion = [int]($versionNumber.Split('.')[0])
        
        if ($majorVersion -ge 16) {
            Write-Host "‚úÖ Vers√£o do Node.js √© compat√≠vel (>= 16)" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Aviso: Vers√£o do Node.js pode ser muito antiga. Recomendado: 16+" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ùå Erro ao obter vers√£o do Node.js" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚ùå Node.js n√£o encontrado!" -ForegroundColor Red
    Write-Host "   Por favor, instale o Node.js em: https://nodejs.org/" -ForegroundColor Yellow
    Write-Host "   Vers√£o recomendada: 16.x ou superior" -ForegroundColor Yellow
    exit 1
}

# Verificar npm
Write-Host "`nüîç Verificando npm..." -ForegroundColor Cyan
if (Test-Command "npm") {
    $npmVersion = Get-NpmVersion
    if ($npmVersion) {
        Write-Host "‚úÖ npm encontrado: $npmVersion" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erro ao obter vers√£o do npm" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚ùå npm n√£o encontrado!" -ForegroundColor Red
    Write-Host "   O npm geralmente vem com o Node.js" -ForegroundColor Yellow
    exit 1
}

# Verificar se node_modules existe
Write-Host "`nüîç Verificando depend√™ncias..." -ForegroundColor Cyan
$nodeModulesPath = Join-Path $currentDir "node_modules"

if (Test-Path $nodeModulesPath) {
    Write-Host "‚úÖ node_modules encontrado" -ForegroundColor Green
    
    # Verificar se as depend√™ncias principais est√£o instaladas
    $reactPath = Join-Path $nodeModulesPath "react"
    $typescriptPath = Join-Path $nodeModulesPath "typescript"
    
    if (Test-Path $reactPath -and Test-Path $typescriptPath) {
        Write-Host "‚úÖ Depend√™ncias principais verificadas" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Algumas depend√™ncias podem estar faltando" -ForegroundColor Yellow
        Write-Host "   Executando npm install..." -ForegroundColor Cyan
        npm install
    }
} else {
    Write-Host "üì¶ node_modules n√£o encontrado. Instalando depend√™ncias..." -ForegroundColor Yellow
    npm install
}

# Verificar se a instala√ß√£o foi bem-sucedida
if (-not (Test-Path $nodeModulesPath)) {
    Write-Host "‚ùå Falha na instala√ß√£o das depend√™ncias" -ForegroundColor Red
    exit 1
}

# Verificar se o arquivo de configura√ß√£o do TypeScript existe
Write-Host "`nüîç Verificando configura√ß√µes..." -ForegroundColor Cyan
$tsConfigPath = Join-Path $currentDir "tsconfig.json"
$tailwindConfigPath = Join-Path $currentDir "tailwind.config.js"

if (Test-Path $tsConfigPath) {
    Write-Host "‚úÖ tsconfig.json encontrado" -ForegroundColor Green
} else {
    Write-Host "‚ùå tsconfig.json n√£o encontrado" -ForegroundColor Red
    exit 1
}

if (Test-Path $tailwindConfigPath) {
    Write-Host "‚úÖ tailwind.config.js encontrado" -ForegroundColor Green
} else {
    Write-Host "‚ùå tailwind.config.js n√£o encontrado" -ForegroundColor Red
    exit 1
}

# Verificar se os arquivos principais da aplica√ß√£o existem
Write-Host "`nüîç Verificando arquivos da aplica√ß√£o..." -ForegroundColor Cyan
$srcPath = Join-Path $currentDir "src"
$appPath = Join-Path $srcPath "App.tsx"
$indexPath = Join-Path $srcPath "index.tsx"

if (Test-Path $srcPath) {
    Write-Host "‚úÖ Diret√≥rio src encontrado" -ForegroundColor Green
} else {
    Write-Host "‚ùå Diret√≥rio src n√£o encontrado" -ForegroundColor Red
    exit 1
}

if (Test-Path $appPath) {
    Write-Host "‚úÖ App.tsx encontrado" -ForegroundColor Green
} else {
    Write-Host "‚ùå App.tsx n√£o encontrado" -ForegroundColor Red
    exit 1
}

if (Test-Path $indexPath) {
    Write-Host "‚úÖ index.tsx encontrado" -ForegroundColor Green
} else {
    Write-Host "‚ùå index.tsx n√£o encontrado" -ForegroundColor Red
    exit 1
}

# Verificar se o servidor j√° est√° rodando
Write-Host "`nüîç Verificando se o servidor j√° est√° rodando..." -ForegroundColor Cyan
$port3000 = Get-NetTCPConnection -LocalPort 3000 -ErrorAction SilentlyContinue
$port3001 = Get-NetTCPConnection -LocalPort 3001 -ErrorAction SilentlyContinue

if ($port3000 -or $port3001) {
    Write-Host "‚ö†Ô∏è  Servidor j√° est√° rodando em uma das portas 3000 ou 3001" -ForegroundColor Yellow
    if ($port3000) {
        Write-Host "   Porta 3000 est√° em uso" -ForegroundColor Yellow
    }
    if ($port3001) {
        Write-Host "   Porta 3001 est√° em uso" -ForegroundColor Yellow
    }
    
    $response = Read-Host "Deseja continuar mesmo assim? (s/N)"
    if ($response -ne "s" -and $response -ne "S") {
        Write-Host "Opera√ß√£o cancelada pelo usu√°rio" -ForegroundColor Yellow
        exit 0
    }
}

# Iniciar a aplica√ß√£o
Write-Host "`nüöÄ Iniciando a aplica√ß√£o..." -ForegroundColor Green
Write-Host "   A aplica√ß√£o ser√° aberta em: http://localhost:3000" -ForegroundColor Cyan
Write-Host "   Pressione Ctrl+C para parar o servidor" -ForegroundColor Yellow
Write-Host "`n" -ForegroundColor White

# Executar npm start (isso bloqueia at√© o usu√°rio parar o servidor)
npm start

Write-Host "`nAplicacao finalizada" -ForegroundColor Green 