{"ast":null,"code":"import axios from 'axios';\n// Base URL da API de dados abertos do Compras.gov\nconst API_BASE_URL = 'https://dadosabertos.compras.gov.br';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': '*/*'\n  }\n});\nexport const comprasGovApi = {\n  // Buscar grupos de materiais - endpoint correto da documentação\n  getGruposMateriais: async filters => {\n    try {\n      const params = new URLSearchParams();\n      if (filters !== null && filters !== void 0 && filters.pagina) {\n        params.append('pagina', filters.pagina.toString());\n      }\n      if (filters !== null && filters !== void 0 && filters.codigoGrupo) {\n        params.append('codigoGrupo', filters.codigoGrupo.toString());\n      }\n      if ((filters === null || filters === void 0 ? void 0 : filters.statusGrupo) !== undefined) {\n        params.append('statusGrupo', filters.statusGrupo.toString());\n      }\n      const response = await api.get(`/modulo-material/1_consultarGrupoMaterial?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar grupos de materiais:', error);\n      throw new Error('Falha ao buscar grupos de materiais.');\n    }\n  },\n  // Buscar classes de materiais - endpoint correto da documentação\n  getClassesMateriais: async filters => {\n    try {\n      const params = new URLSearchParams();\n      if (filters !== null && filters !== void 0 && filters.pagina) {\n        params.append('pagina', filters.pagina.toString());\n      }\n      if (filters !== null && filters !== void 0 && filters.codigoGrupo) {\n        params.append('codigoGrupo', filters.codigoGrupo.toString());\n      }\n      if (filters !== null && filters !== void 0 && filters.codigoClasse) {\n        params.append('codigoClasse', filters.codigoClasse.toString());\n      }\n      if ((filters === null || filters === void 0 ? void 0 : filters.statusClasse) !== undefined) {\n        params.append('statusClasse', filters.statusClasse.toString());\n      }\n      if ((filters === null || filters === void 0 ? void 0 : filters.bps) !== undefined) {\n        params.append('bps', filters.bps.toString());\n      }\n      const response = await api.get(`/modulo-material/2_consultarClasseMaterial?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar classes de materiais:', error);\n      throw new Error('Falha ao buscar classes de materiais.');\n    }\n  },\n  // Buscar materiais - vou procurar o endpoint correto na documentação\n  searchMaterials: async filters => {\n    try {\n      // Por enquanto, vou usar uma busca simulada até encontrar o endpoint correto\n      console.log('Buscando materiais com filtros:', filters);\n\n      // Simular resposta para teste\n      const mockResponse = {\n        content: [],\n        totalElements: 0,\n        totalPages: 1,\n        size: filters.size || 20,\n        number: filters.page || 0,\n        first: true,\n        last: true\n      };\n      return mockResponse;\n    } catch (error) {\n      console.error('Erro ao buscar materiais:', error);\n      throw new Error('Falha ao buscar materiais. Tente novamente.');\n    }\n  },\n  // Buscar serviços usando o endpoint que você mencionou\n  searchServices: async filters => {\n    try {\n      const params = new URLSearchParams();\n      if (filters.pagina) {\n        params.append('pagina', filters.pagina.toString());\n      }\n      if (filters.tamanhoPagina) {\n        params.append('tamanhoPagina', filters.tamanhoPagina.toString());\n      }\n      if (filters.codigoSecao) {\n        params.append('codigoSecao', filters.codigoSecao.toString());\n      }\n      if (filters.codigoDivisao) {\n        params.append('codigoDivisao', filters.codigoDivisao.toString());\n      }\n      if (filters.codigoGrupo) {\n        params.append('codigoGrupo', filters.codigoGrupo.toString());\n      }\n      if (filters.codigoClasse) {\n        params.append('codigoClasse', filters.codigoClasse.toString());\n      }\n      if (filters.codigoSubclasse) {\n        params.append('codigoSubclasse', filters.codigoSubclasse.toString());\n      }\n      if (filters.codigoCpc) {\n        params.append('codigoCpc', filters.codigoCpc.toString());\n      }\n      if (filters.codigoServico) {\n        params.append('codigoServico', filters.codigoServico.toString());\n      }\n      if (filters.exclusivoCentralCompras !== undefined) {\n        params.append('exclusivoCentralCompras', filters.exclusivoCentralCompras.toString());\n      }\n      if (filters.statusServico !== undefined) {\n        params.append('statusServico', filters.statusServico.toString());\n      }\n      const response = await api.get(`/modulo-servico/6_consultarItemServico?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar serviços:', error);\n      throw new Error('Falha ao buscar serviços.');\n    }\n  },\n  // Testar conexão com a API\n  testConnection: async () => {\n    try {\n      const response = await api.get('/modulo-material/1_consultarGrupoMaterial?pagina=1');\n      console.log('Conexão com API estabelecida:', response.data);\n      return true;\n    } catch (error) {\n      console.error('Erro ao conectar com API:', error);\n      return false;\n    }\n  },\n  // Buscar material por código específico\n  getMaterialByCode: async codigo => {\n    try {\n      const response = await api.get(`/modulo-material/consultarItemMaterial?codigoMaterial=${codigo}`);\n      const data = response.data;\n      return Array.isArray(data) ? data[0] : data;\n    } catch (error) {\n      console.error('Erro ao buscar material:', error);\n      throw new Error('Falha ao buscar material.');\n    }\n  },\n  // Buscar preços de materiais\n  getMaterialPrices: async codigo => {\n    try {\n      const response = await api.get(`/modulo-material/consultarPrecoMaterial?codigoMaterial=${codigo}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar preços:', error);\n      throw new Error('Falha ao buscar preços do material.');\n    }\n  }\n};\nexport default comprasGovApi;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","headers","comprasGovApi","getGruposMateriais","filters","params","URLSearchParams","pagina","append","toString","codigoGrupo","statusGrupo","undefined","response","get","data","error","console","Error","getClassesMateriais","codigoClasse","statusClasse","bps","searchMaterials","log","mockResponse","content","totalElements","totalPages","size","number","page","first","last","searchServices","tamanhoPagina","codigoSecao","codigoDivisao","codigoSubclasse","codigoCpc","codigoServico","exclusivoCentralCompras","statusServico","testConnection","getMaterialByCode","codigo","Array","isArray","getMaterialPrices"],"sources":["C:/Users/Rodrigo/OneDrive/Documentos/APP/APP_COMPRAS_GOV/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { Material, MaterialSearchResponse, SearchFilters, GrupoMaterial } from '../types';\r\n\r\n// Base URL da API de dados abertos do Compras.gov\r\nconst API_BASE_URL = 'https://dadosabertos.compras.gov.br';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': '*/*',\r\n  },\r\n});\r\n\r\nexport const comprasGovApi = {\r\n  // Buscar grupos de materiais - endpoint correto da documentação\r\n  getGruposMateriais: async (filters?: { pagina?: number; codigoGrupo?: number; statusGrupo?: boolean }): Promise<any> => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      \r\n      if (filters?.pagina) {\r\n        params.append('pagina', filters.pagina.toString());\r\n      }\r\n      if (filters?.codigoGrupo) {\r\n        params.append('codigoGrupo', filters.codigoGrupo.toString());\r\n      }\r\n      if (filters?.statusGrupo !== undefined) {\r\n        params.append('statusGrupo', filters.statusGrupo.toString());\r\n      }\r\n\r\n      const response = await api.get(`/modulo-material/1_consultarGrupoMaterial?${params.toString()}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar grupos de materiais:', error);\r\n      throw new Error('Falha ao buscar grupos de materiais.');\r\n    }\r\n  },\r\n\r\n  // Buscar classes de materiais - endpoint correto da documentação\r\n  getClassesMateriais: async (filters?: { \r\n    pagina?: number; \r\n    codigoGrupo?: number; \r\n    codigoClasse?: number; \r\n    statusClasse?: boolean; \r\n    bps?: boolean \r\n  }): Promise<any> => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      \r\n      if (filters?.pagina) {\r\n        params.append('pagina', filters.pagina.toString());\r\n      }\r\n      if (filters?.codigoGrupo) {\r\n        params.append('codigoGrupo', filters.codigoGrupo.toString());\r\n      }\r\n      if (filters?.codigoClasse) {\r\n        params.append('codigoClasse', filters.codigoClasse.toString());\r\n      }\r\n      if (filters?.statusClasse !== undefined) {\r\n        params.append('statusClasse', filters.statusClasse.toString());\r\n      }\r\n      if (filters?.bps !== undefined) {\r\n        params.append('bps', filters.bps.toString());\r\n      }\r\n\r\n      const response = await api.get(`/modulo-material/2_consultarClasseMaterial?${params.toString()}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar classes de materiais:', error);\r\n      throw new Error('Falha ao buscar classes de materiais.');\r\n    }\r\n  },\r\n\r\n  // Buscar materiais - vou procurar o endpoint correto na documentação\r\n  searchMaterials: async (filters: SearchFilters): Promise<MaterialSearchResponse> => {\r\n    try {\r\n      // Por enquanto, vou usar uma busca simulada até encontrar o endpoint correto\r\n      console.log('Buscando materiais com filtros:', filters);\r\n      \r\n      // Simular resposta para teste\r\n      const mockResponse = {\r\n        content: [],\r\n        totalElements: 0,\r\n        totalPages: 1,\r\n        size: filters.size || 20,\r\n        number: filters.page || 0,\r\n        first: true,\r\n        last: true\r\n      };\r\n\r\n      return mockResponse;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar materiais:', error);\r\n      throw new Error('Falha ao buscar materiais. Tente novamente.');\r\n    }\r\n  },\r\n\r\n  // Buscar serviços usando o endpoint que você mencionou\r\n  searchServices: async (filters: any): Promise<any> => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      \r\n      if (filters.pagina) {\r\n        params.append('pagina', filters.pagina.toString());\r\n      }\r\n      if (filters.tamanhoPagina) {\r\n        params.append('tamanhoPagina', filters.tamanhoPagina.toString());\r\n      }\r\n      if (filters.codigoSecao) {\r\n        params.append('codigoSecao', filters.codigoSecao.toString());\r\n      }\r\n      if (filters.codigoDivisao) {\r\n        params.append('codigoDivisao', filters.codigoDivisao.toString());\r\n      }\r\n      if (filters.codigoGrupo) {\r\n        params.append('codigoGrupo', filters.codigoGrupo.toString());\r\n      }\r\n      if (filters.codigoClasse) {\r\n        params.append('codigoClasse', filters.codigoClasse.toString());\r\n      }\r\n      if (filters.codigoSubclasse) {\r\n        params.append('codigoSubclasse', filters.codigoSubclasse.toString());\r\n      }\r\n      if (filters.codigoCpc) {\r\n        params.append('codigoCpc', filters.codigoCpc.toString());\r\n      }\r\n      if (filters.codigoServico) {\r\n        params.append('codigoServico', filters.codigoServico.toString());\r\n      }\r\n      if (filters.exclusivoCentralCompras !== undefined) {\r\n        params.append('exclusivoCentralCompras', filters.exclusivoCentralCompras.toString());\r\n      }\r\n      if (filters.statusServico !== undefined) {\r\n        params.append('statusServico', filters.statusServico.toString());\r\n      }\r\n\r\n      const response = await api.get(`/modulo-servico/6_consultarItemServico?${params.toString()}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar serviços:', error);\r\n      throw new Error('Falha ao buscar serviços.');\r\n    }\r\n  },\r\n\r\n  // Testar conexão com a API\r\n  testConnection: async (): Promise<boolean> => {\r\n    try {\r\n      const response = await api.get('/modulo-material/1_consultarGrupoMaterial?pagina=1');\r\n      console.log('Conexão com API estabelecida:', response.data);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Erro ao conectar com API:', error);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // Buscar material por código específico\r\n  getMaterialByCode: async (codigo: string): Promise<Material> => {\r\n    try {\r\n      const response = await api.get(`/modulo-material/consultarItemMaterial?codigoMaterial=${codigo}`);\r\n      const data = response.data;\r\n      return Array.isArray(data) ? data[0] : data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar material:', error);\r\n      throw new Error('Falha ao buscar material.');\r\n    }\r\n  },\r\n\r\n  // Buscar preços de materiais\r\n  getMaterialPrices: async (codigo: string): Promise<any> => {\r\n    try {\r\n      const response = await api.get(`/modulo-material/consultarPrecoMaterial?codigoMaterial=${codigo}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar preços:', error);\r\n      throw new Error('Falha ao buscar preços do material.');\r\n    }\r\n  }\r\n};\r\n\r\nexport default comprasGovApi; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}