{"ast":null,"code":"import axios from 'axios';\n// Base URL da API de dados abertos do Compras.gov\nconst API_BASE_URL = 'https://dadosabertos.compras.gov.br';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\nexport const comprasGovApi = {\n  // Buscar materiais usando o endpoint correto\n  searchMaterials: async filters => {\n    try {\n      const params = new URLSearchParams();\n\n      // Parâmetros baseados na documentação da API\n      if (filters.page !== undefined) {\n        params.append('pagina', (filters.page + 1).toString()); // API usa 1-based pagination\n      }\n      if (filters.size) {\n        params.append('tamanhoPagina', filters.size.toString());\n      }\n      if (filters.codigo) {\n        params.append('codigoMaterial', filters.codigo);\n      }\n      if (filters.grupo) {\n        params.append('codigoGrupo', filters.grupo);\n      }\n      if (filters.status) {\n        params.append('statusMaterial', filters.status === 'ATIVO' ? 'true' : 'false');\n      }\n      if (filters.descricao) {\n        params.append('descricao', filters.descricao);\n      }\n\n      // Endpoint para consultar materiais\n      const response = await api.get(`/modulo-material/consultarItemMaterial?${params.toString()}`);\n\n      // Adaptar resposta para o formato esperado\n      const data = response.data;\n      return {\n        content: data.content || data || [],\n        totalElements: data.totalElements || data.length || 0,\n        totalPages: data.totalPages || 1,\n        size: filters.size || 20,\n        number: filters.page || 0,\n        first: (filters.page || 0) === 0,\n        last: true // Simplificado\n      };\n    } catch (error) {\n      console.error('Erro ao buscar materiais:', error);\n      throw new Error('Falha ao buscar materiais. Tente novamente.');\n    }\n  },\n  // Buscar serviços usando o endpoint que você mencionou\n  searchServices: async filters => {\n    try {\n      const params = new URLSearchParams();\n      if (filters.pagina) {\n        params.append('pagina', filters.pagina.toString());\n      }\n      if (filters.tamanhoPagina) {\n        params.append('tamanhoPagina', filters.tamanhoPagina.toString());\n      }\n      if (filters.codigoSecao) {\n        params.append('codigoSecao', filters.codigoSecao.toString());\n      }\n      if (filters.codigoDivisao) {\n        params.append('codigoDivisao', filters.codigoDivisao.toString());\n      }\n      if (filters.codigoGrupo) {\n        params.append('codigoGrupo', filters.codigoGrupo.toString());\n      }\n      if (filters.codigoClasse) {\n        params.append('codigoClasse', filters.codigoClasse.toString());\n      }\n      if (filters.codigoSubclasse) {\n        params.append('codigoSubclasse', filters.codigoSubclasse.toString());\n      }\n      if (filters.codigoCpc) {\n        params.append('codigoCpc', filters.codigoCpc.toString());\n      }\n      if (filters.codigoServico) {\n        params.append('codigoServico', filters.codigoServico.toString());\n      }\n      if (filters.exclusivoCentralCompras !== undefined) {\n        params.append('exclusivoCentralCompras', filters.exclusivoCentralCompras.toString());\n      }\n      if (filters.statusServico !== undefined) {\n        params.append('statusServico', filters.statusServico.toString());\n      }\n      const response = await api.get(`/modulo-servico/consultarItemServico?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar serviços:', error);\n      throw new Error('Falha ao buscar serviços.');\n    }\n  },\n  // Buscar grupos de materiais\n  getGruposMateriais: async () => {\n    try {\n      const response = await api.get('/modulo-material/consultarGrupoMaterial');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar grupos de materiais:', error);\n      throw new Error('Falha ao buscar grupos de materiais.');\n    }\n  },\n  // Buscar material por código específico\n  getMaterialByCode: async codigo => {\n    try {\n      const response = await api.get(`/modulo-material/consultarItemMaterial?codigoMaterial=${codigo}`);\n      const data = response.data;\n      return Array.isArray(data) ? data[0] : data;\n    } catch (error) {\n      console.error('Erro ao buscar material:', error);\n      throw new Error('Falha ao buscar material.');\n    }\n  },\n  // Buscar preços de materiais\n  getMaterialPrices: async codigo => {\n    try {\n      const response = await api.get(`/modulo-material/consultarPrecoMaterial?codigoMaterial=${codigo}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar preços:', error);\n      throw new Error('Falha ao buscar preços do material.');\n    }\n  }\n};\nexport default comprasGovApi;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","headers","comprasGovApi","searchMaterials","filters","params","URLSearchParams","page","undefined","append","toString","size","codigo","grupo","status","descricao","response","get","data","content","totalElements","length","totalPages","number","first","last","error","console","Error","searchServices","pagina","tamanhoPagina","codigoSecao","codigoDivisao","codigoGrupo","codigoClasse","codigoSubclasse","codigoCpc","codigoServico","exclusivoCentralCompras","statusServico","getGruposMateriais","getMaterialByCode","Array","isArray","getMaterialPrices"],"sources":["C:/Users/Rodrigo/OneDrive/Documentos/APP/APP_COMPRAS_GOV/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { Material, MaterialSearchResponse, SearchFilters, GrupoMaterial } from '../types';\r\n\r\n// Base URL da API de dados abertos do Compras.gov\r\nconst API_BASE_URL = 'https://dadosabertos.compras.gov.br';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n  },\r\n});\r\n\r\nexport const comprasGovApi = {\r\n  // Buscar materiais usando o endpoint correto\r\n  searchMaterials: async (filters: SearchFilters): Promise<MaterialSearchResponse> => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      \r\n      // Parâmetros baseados na documentação da API\r\n      if (filters.page !== undefined) {\r\n        params.append('pagina', (filters.page + 1).toString()); // API usa 1-based pagination\r\n      }\r\n      if (filters.size) {\r\n        params.append('tamanhoPagina', filters.size.toString());\r\n      }\r\n      if (filters.codigo) {\r\n        params.append('codigoMaterial', filters.codigo);\r\n      }\r\n      if (filters.grupo) {\r\n        params.append('codigoGrupo', filters.grupo);\r\n      }\r\n      if (filters.status) {\r\n        params.append('statusMaterial', filters.status === 'ATIVO' ? 'true' : 'false');\r\n      }\r\n      if (filters.descricao) {\r\n        params.append('descricao', filters.descricao);\r\n      }\r\n\r\n      // Endpoint para consultar materiais\r\n      const response = await api.get(`/modulo-material/consultarItemMaterial?${params.toString()}`);\r\n      \r\n      // Adaptar resposta para o formato esperado\r\n      const data = response.data;\r\n      return {\r\n        content: data.content || data || [],\r\n        totalElements: data.totalElements || data.length || 0,\r\n        totalPages: data.totalPages || 1,\r\n        size: filters.size || 20,\r\n        number: filters.page || 0,\r\n        first: (filters.page || 0) === 0,\r\n        last: true // Simplificado\r\n      };\r\n    } catch (error) {\r\n      console.error('Erro ao buscar materiais:', error);\r\n      throw new Error('Falha ao buscar materiais. Tente novamente.');\r\n    }\r\n  },\r\n\r\n  // Buscar serviços usando o endpoint que você mencionou\r\n  searchServices: async (filters: any): Promise<any> => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      \r\n      if (filters.pagina) {\r\n        params.append('pagina', filters.pagina.toString());\r\n      }\r\n      if (filters.tamanhoPagina) {\r\n        params.append('tamanhoPagina', filters.tamanhoPagina.toString());\r\n      }\r\n      if (filters.codigoSecao) {\r\n        params.append('codigoSecao', filters.codigoSecao.toString());\r\n      }\r\n      if (filters.codigoDivisao) {\r\n        params.append('codigoDivisao', filters.codigoDivisao.toString());\r\n      }\r\n      if (filters.codigoGrupo) {\r\n        params.append('codigoGrupo', filters.codigoGrupo.toString());\r\n      }\r\n      if (filters.codigoClasse) {\r\n        params.append('codigoClasse', filters.codigoClasse.toString());\r\n      }\r\n      if (filters.codigoSubclasse) {\r\n        params.append('codigoSubclasse', filters.codigoSubclasse.toString());\r\n      }\r\n      if (filters.codigoCpc) {\r\n        params.append('codigoCpc', filters.codigoCpc.toString());\r\n      }\r\n      if (filters.codigoServico) {\r\n        params.append('codigoServico', filters.codigoServico.toString());\r\n      }\r\n      if (filters.exclusivoCentralCompras !== undefined) {\r\n        params.append('exclusivoCentralCompras', filters.exclusivoCentralCompras.toString());\r\n      }\r\n      if (filters.statusServico !== undefined) {\r\n        params.append('statusServico', filters.statusServico.toString());\r\n      }\r\n\r\n      const response = await api.get(`/modulo-servico/consultarItemServico?${params.toString()}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar serviços:', error);\r\n      throw new Error('Falha ao buscar serviços.');\r\n    }\r\n  },\r\n\r\n  // Buscar grupos de materiais\r\n  getGruposMateriais: async (): Promise<GrupoMaterial[]> => {\r\n    try {\r\n      const response = await api.get('/modulo-material/consultarGrupoMaterial');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar grupos de materiais:', error);\r\n      throw new Error('Falha ao buscar grupos de materiais.');\r\n    }\r\n  },\r\n\r\n  // Buscar material por código específico\r\n  getMaterialByCode: async (codigo: string): Promise<Material> => {\r\n    try {\r\n      const response = await api.get(`/modulo-material/consultarItemMaterial?codigoMaterial=${codigo}`);\r\n      const data = response.data;\r\n      return Array.isArray(data) ? data[0] : data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar material:', error);\r\n      throw new Error('Falha ao buscar material.');\r\n    }\r\n  },\r\n\r\n  // Buscar preços de materiais\r\n  getMaterialPrices: async (codigo: string): Promise<any> => {\r\n    try {\r\n      const response = await api.get(`/modulo-material/consultarPrecoMaterial?codigoMaterial=${codigo}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar preços:', error);\r\n      throw new Error('Falha ao buscar preços do material.');\r\n    }\r\n  }\r\n};\r\n\r\nexport default comprasGovApi; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}