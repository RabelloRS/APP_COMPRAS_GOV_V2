{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://dadosabertos.compras.gov.br/api/v1';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\nexport const comprasGovApi = {\n  // Buscar materiais por descrição\n  searchMaterials: async filters => {\n    try {\n      const params = new URLSearchParams();\n      if (filters.descricao) {\n        params.append('descricao', filters.descricao);\n      }\n      if (filters.codigo) {\n        params.append('codigo', filters.codigo);\n      }\n      if (filters.grupo) {\n        params.append('grupo', filters.grupo);\n      }\n      if (filters.status) {\n        params.append('status', filters.status);\n      }\n      if (filters.page) {\n        params.append('page', filters.page.toString());\n      }\n      if (filters.size) {\n        params.append('size', filters.size.toString());\n      }\n      const response = await api.get(`/catalogo/materiais?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar materiais:', error);\n      throw new Error('Falha ao buscar materiais. Tente novamente.');\n    }\n  },\n  // Buscar grupos de materiais\n  getGruposMateriais: async () => {\n    try {\n      const response = await api.get('/catalogo/grupos-materiais');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar grupos de materiais:', error);\n      throw new Error('Falha ao buscar grupos de materiais.');\n    }\n  },\n  // Buscar material por código específico\n  getMaterialByCode: async codigo => {\n    try {\n      const response = await api.get(`/catalogo/materiais/${codigo}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar material:', error);\n      throw new Error('Falha ao buscar material.');\n    }\n  },\n  // Buscar preços de materiais\n  getMaterialPrices: async codigo => {\n    try {\n      const response = await api.get(`/catalogo/materiais/${codigo}/precos`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar preços:', error);\n      throw new Error('Falha ao buscar preços do material.');\n    }\n  }\n};\nexport default comprasGovApi;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","headers","comprasGovApi","searchMaterials","filters","params","URLSearchParams","descricao","append","codigo","grupo","status","page","toString","size","response","get","data","error","console","Error","getGruposMateriais","getMaterialByCode","getMaterialPrices"],"sources":["C:/Users/Rodrigo/OneDrive/Documentos/APP/APP_COMPRAS_GOV/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { Material, MaterialSearchResponse, SearchFilters, GrupoMaterial } from '../types';\r\n\r\nconst API_BASE_URL = 'https://dadosabertos.compras.gov.br/api/v1';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n  },\r\n});\r\n\r\nexport const comprasGovApi = {\r\n  // Buscar materiais por descrição\r\n  searchMaterials: async (filters: SearchFilters): Promise<MaterialSearchResponse> => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      \r\n      if (filters.descricao) {\r\n        params.append('descricao', filters.descricao);\r\n      }\r\n      if (filters.codigo) {\r\n        params.append('codigo', filters.codigo);\r\n      }\r\n      if (filters.grupo) {\r\n        params.append('grupo', filters.grupo);\r\n      }\r\n      if (filters.status) {\r\n        params.append('status', filters.status);\r\n      }\r\n      if (filters.page) {\r\n        params.append('page', filters.page.toString());\r\n      }\r\n      if (filters.size) {\r\n        params.append('size', filters.size.toString());\r\n      }\r\n\r\n      const response = await api.get(`/catalogo/materiais?${params.toString()}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar materiais:', error);\r\n      throw new Error('Falha ao buscar materiais. Tente novamente.');\r\n    }\r\n  },\r\n\r\n  // Buscar grupos de materiais\r\n  getGruposMateriais: async (): Promise<GrupoMaterial[]> => {\r\n    try {\r\n      const response = await api.get('/catalogo/grupos-materiais');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar grupos de materiais:', error);\r\n      throw new Error('Falha ao buscar grupos de materiais.');\r\n    }\r\n  },\r\n\r\n  // Buscar material por código específico\r\n  getMaterialByCode: async (codigo: string): Promise<Material> => {\r\n    try {\r\n      const response = await api.get(`/catalogo/materiais/${codigo}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar material:', error);\r\n      throw new Error('Falha ao buscar material.');\r\n    }\r\n  },\r\n\r\n  // Buscar preços de materiais\r\n  getMaterialPrices: async (codigo: string): Promise<any> => {\r\n    try {\r\n      const response = await api.get(`/catalogo/materiais/${codigo}/precos`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar preços:', error);\r\n      throw new Error('Falha ao buscar preços do material.');\r\n    }\r\n  }\r\n};\r\n\r\nexport default comprasGovApi; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}